[{"title":"Mysql任意时间范围内按任意时段分组","date":"2017-01-18T08:16:07.000Z","path":"2017/01/18/Mysql任意时间范围内按任意时段分组/","text":"上代码：1234567set @timeBegin=&apos;2017-01-17 00:00:00&apos;;set @interval=60*10;select FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP(`BUYTIME`)/@interval)*@interval) as timeNearTo, count(*) as &apos;count&apos; from wg_device_salewhere BUYTIME&gt;=@timeBegin AND BUYTIME&lt;=DATE_ADD(@timeBegin,INTERVAL 1 DAY)group by timeNearTo order by timeNearTo desc; 结果： timeNearTo count 2017-01-17 23:00:00 6 2017-01-17 23:30:00 1 2017-01-17 22:30:00 8 2017-01-17 22:00:00 6 2017-01-17 21:30:00 14 2017-01-17 21:00:00 18 2017-01-17 20:30:00 24 2017-01-17 20:00:00 28 2017-01-17 19:30:00 37 2017-01-17 19:00:00 25 2017-01-17 18:30:00 21 2017-01-17 18:00:00 37 2017-01-17 17:30:00 36 2017-01-17 17:00:00 48 2017-01-17 16:30:00 31 2017-01-17 16:00:00 46 2017-01-17 15:30:00 36 2017-01-17 15:00:00 37 2017-01-17 14:30:00 33 2017-01-17 14:00:00 31 2017-01-17 13:30:00 41 2017-01-17 13:00:00 37 2017-01-17 12:30:00 22 2017-01-17 12:00:00 30 2017-01-17 11:30:00 33 2017-01-17 11:00:00 27 2017-01-17 10:30:00 21 2017-01-17 10:00:00 23 2017-01-17 09:30:00 8 2017-01-17 09:00:00 9 2017-01-17 08:30:00 2 2017-01-17 08:00:00 1 2017-01-17 07:00:00 1 2017-01-17 00:30:00 1 2017-01-17 00:00:00 1","tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://lch277.github.io/tags/Mysql/"}]},{"title":"vuex的理解","date":"2016-12-27T12:42:06.000Z","path":"2016/12/27/vuex的理解/","text":"vue2的状态管理模式vuex类似react的redux，都是提供一个单一状态树的模型store。 数据操作部分：redux是分别编写action和reducer，然后将state和action映射为组件的props，reducer部分则与组件没有直接关系，只负责修改state；vuex的store中可以定义一些数据操作的方法，getters是读取过滤数据的公共操作，mutations是修改数据的公共操作，actions是异步修改数据的公共操作，然后定义组件时可以映射这些公共操作。 数据模块化：redux可以按store的数据结构自行拆分模块，然后分模块组织action和reducer；vuex则提供了modules，每个module可以拥有自己的state、mutations、actions、getters，甚至是子module——从上到下的分割。 整体来看，vuex和redux提供的功能是类似的，redux把action和reducer分开的做法逻辑上和代码上都更为分散，写起来相对繁琐，而vuex把state和相关操作整合在一起，用户的关注点聚集在数据上，写起来简洁，看起来直观，理解上也较容易。","tags":[{"name":"vuex","slug":"vuex","permalink":"http://lch277.github.io/tags/vuex/"},{"name":"vue","slug":"vue","permalink":"http://lch277.github.io/tags/vue/"}]},{"title":"缘起缘灭","date":"2016-12-22T13:06:37.000Z","path":"2016/12/22/缘起缘灭/","text":"谷歌搜索Vert.x的EventBus相关的文章，被这篇Vert.x 技术内幕 | Event Bus 源码分析 (Local模式)吸引，文章不错，网站也不错，更厉害的是作者竟然只是一个大三学生，却熟悉各种前沿技术，很勤奋的写了大量源码解读博客，还有英文版，在github更有诸多项目实践，实在佩服，果断关注。 一时兴起，又决定仿照搭建自己的博客，原来是大名鼎鼎的Hexo框架，跑起来后又觉得原生主题不甚满意，又折腾切换主题，有幸找到Litten的yilia主题，细细一看，原来又是一个很厉害的人，腾讯的前端工程师，博客却写得完全不像是一个程序员，文字很赞，音乐也很赞，主题非常棒，谢谢。 谢谢这些厉害又热爱分享的人，学习，感恩。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://lch277.github.io/tags/随笔/"}]},{"title":"Hello World","date":"2016-12-22T10:40:39.106Z","path":"2016/12/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]